# Enable colors and change prompt:
autoload -U colors && colors

# Set prompt
BASE_PS1="%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[yellow]%}@%{$fg[yellow]%}%M %b%{$fg[magenta]%}%(3~|.../%2~|%~)%{$fg[red]%}%B]%b"
PS1="$BASE_PS1%{$fg[blue]%}[I]%{$reset_color%}$%b "

# Load aliases and shortcuts if existent.
[ -f $HOME/.functions ] && source $HOME/.functions
[ -f $HOME/.aliases ] && source $HOME/.aliases

[ -f $HOME/.config/nnn/config.sh ] && source $HOME/.config/nnn/config.sh

[ -f /usr/share/nnn/quitcd/quitcd.bash_zsh ] && source /usr/share/nnn/quitcd/quitcd.bash_zsh

# Keyboard model
setxkbmap -model thinkpad -layout br -variant abnt

# Keyboard repeat
xset -r 43
xset -r 44
xset -r 45
xset -r 46
xset r rate 180 50

 # xrdb ~/.Xresources
# xmodmap ~/.Xmodmap 2> /dev/null

# History in cache directory
HISTCONTROL=ignoreboth
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history
export HISTIGNORE="ls:cd:vi:vim:nvim"
export HISTTIMEFORMAT="%h %d %H:%M:%S "

# The meaning of these options can be found in man page of `zshoptions`.
setopt HIST_IGNORE_ALL_DUPS  # do not put duplicated command into history list
setopt HIST_SAVE_NO_DUPS  # do not save duplicated command
setopt HIST_REDUCE_BLANKS  # remove unnecessary blanks
setopt INC_APPEND_HISTORY_TIME  # append command to history file immediately after execution
setopt EXTENDED_HISTORY  # record command start time

stty -ixon

# Colored man pages
export MANPAGER="sh -c 'col -bx | bat -l man -p'"

# Git branch in prompt
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
RPROMPT=%F{red}\$vcs_info_msg_0_
zstyle ':vcs_info:git:*' formats '%b'

# Basic tab complete
autoload -Uz compinit
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-za-z}'
zmodload zsh/complist
compinit
_comp_options+=(globdots)

# vi mode
bindkey -v
export KEYTIMEOUT=1

# H and L with vim like behavior
bindkey -M vicmd H beginning-of-line
bindkey -M vicmd L end-of-line

# Use vim keys in tab complete menu
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

# History search
bindkey "^[[A" history-beginning-search-backward
bindkey "^[[B" history-beginning-search-forward

# Change PS1 when in different vi modes
function zle-keymap-select {
    if [[ ${KEYMAP} == vicmd ]] || [[ $1 = 'block' ]]; then
        echo -ne '\e[1 q'
        PS1="$BASE_PS1%{$fg[green]%}%B[N]%b%{$reset_color%}$%b "
        zle reset-prompt
    elif [[ ${KEYMAP} == main ]] ||
        [[ ${KEYMAP} == viins ]] ||
        [[ ${KEYMAP} = '' ]] ||
        [[ $1 = 'beam' ]]; then
            echo -ne '\e[1 q'
            PS1="$BASE_PS1%{$fg[blue]%}%B[I]%b%{$reset_color%}$%b "
            zle reset-prompt
    fi
}
function zle-line-init() {
    zle -K viins
}

zle -N zle-keymap-select
zle -N zle-line-init

# Use beam shape cursor on startup.
echo -ne '\e[5 q'
# Use beam shape cursor for each new prompt.
preexec() { echo -ne '\e[5 q' ;}

# Change in quotes (vim like)
autoload -U select-quoted
zle -N select-quoted
for m in visual viopp; do
    for c in {a,i}{\',\",\`}; do
        bindkey -M $m $c select-quoted
    done
done

# ci{, ci(, di{ etc..
autoload -U select-bracketed
zle -N select-bracketed
for m in visual viopp; do
    for c in {a,i}${(s..)^:-"()[]{}<>"}; do
        bindkey -M $m $c select-bracketed
    done
done

# Ranger file navigation
bindkey -s '^r' 'rangercd\n'

# Load z
source /usr/share/z/z.sh

# clipmenu
export CM_SELECTIONS="clipboard"
export CM_DEBUG=0
export CM_OUTPUT_CLIP=1
export CM_MAX_CLIPS=10
export CM_LAUNCHER="rofi"

# fzf settings
source /usr/share/fzf/completion.zsh
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
export FZF_DEFAULT_OPTS="-m --height 60% --layout=reverse --border --preview='bat {} --color=always'"

# Load zsh-syntax-highlighting; should be last.
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh 2>/dev/null

export PATH=/home/neumann/.local/bin:$PATH

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!

# __conda_setup="$('/home/neumann/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     if [ -f "/home/neumann/miniconda3/etc/profile.d/conda.sh" ]; then
#         . "/home/neumann/miniconda3/etc/profile.d/conda.sh"
#     else
#         export PATH="/home/neumann/miniconda3/bin:$PATH"
#     fi
# fi
# unset __conda_setup

# <<< conda initialize <<<
